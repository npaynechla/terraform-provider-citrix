trigger:
  branches:
    include:
      - main

variables:
  TF_VERSION: '1.5.0'  # Specify your Terraform version
  PROVIDER_CITRIX_VERSION: '~> 1.0.0'  # Ensure compatibility with Citrix Terraform provider

stages:
  - stage: TerraformInit
    displayName: 'Terraform Init Stage'
    jobs:
      - job: InitTerraform
        displayName: 'Initialize Terraform'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)

          # Azure Key Vault task to retrieve Citrix API key and URL
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: 'Your-Service-Connection-Name'  # Azure DevOps service connection
              keyVaultName: 'Your-Key-Vault-Name'                # Your Azure Key Vault name
              secretsFilter: 'citrix-api-key,citrix-api-url'     # List of secrets to retrieve
              runAsPreJob: true                                  # Ensures it runs before the main job steps

          - checkout: self

          # Initialize Terraform with backend config
          - script: |
              terraform init \
              -backend-config="storage_account_name=$(AZURE_STORAGE_ACCOUNT)" \
              -backend-config="container_name=$(TF_STATE_CONTAINER)" \
              -backend-config="key=$(TF_STATE_KEY)" \
              -backend-config="access_key=$(AZURE_STORAGE_ACCESS_KEY)"
            displayName: 'Terraform Init with Backend'

  - stage: TerraformPlan
    displayName: 'Terraform Plan Stage'
    dependsOn: TerraformInit
    jobs:
      - job: PlanTerraform
        displayName: 'Terraform Plan'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)

          # Run Terraform plan with Citrix API credentials from Key Vault
          - script: |
              terraform plan \
              -var "citrix_api_key=$(citrix-api-key)" \
              -var "citrix_api_url=$(citrix-api-url)"
            displayName: 'Terraform Plan'

  - stage: TerraformApply
    displayName: 'Terraform Apply Stage'
    dependsOn: TerraformPlan
    jobs:
      - job: ApplyTerraform
        displayName: 'Apply Terraform Changes'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)

          # Run Terraform apply with Citrix API credentials from Key Vault
          - script: |
              terraform apply -auto-approve \
              -var "citrix_api_key=$(citrix-api-key)" \
              -var "citrix_api_url=$(citrix-api-url)"
            displayName: 'Apply Terraform'
